SafesController.getFolders.value=To get list of folders of a Safe
SafesController.getFolders.notes=To get list of folders of a Safe

SafesController.deleteGroupFromSafe.value=To remove a group from safe
SafesController.deleteGroupFromSafe.notes=To remove a group from safe

SafesController.getInfo.value=To get sdb information
SafesController.getInfo.notes=To get sdb information

SafesController.createSafe.value=To create Safe and associate basic policies
SafesController.createSafe.notes=This creates Safe

SafesController.updateSafe.value=To update Safe and its associated users, groups, roles
SafesController.updateSafe.notes=This updates Safe and its associated users, groups, roles

SafesController.deleteSafe.value=To delete Safe and its associated users, groups, roles
SafesController.deleteSafe.notes=This deletes Safe

SafesController.addUserToSafe.value=To add a user to Safe
SafesController.addUserToSafe.notes=This add a user to Safe

SafesController.removeUserFromSafe.value=To remove a user from Safe
SafesController.removeUserFromSafe.notes=This removes a user from Safe

SafesController.addGroupToSafe.value=To add a group to Safe
SafesController.addGroupToSafe.notes=This adds a group to Safe

SafesController.removeGroupFromSafe.value=To remove a group from Safe
SafesController.removeGroupFromSafe.notes=This removes a group from Safe

SafesController.getSafe.value=To get list of Safes
SafesController.getSafe.notes=This gets the list of Safes

VaultAuthControllerV2.login.value=To login to TVault
VaultAuthControllerV2.login.notes=To login to TVault using an authentication method set in application.properties file

VaultAuthControllerV2.renew.value=To renew a user token
VaultAuthControllerV2.renew.notes=To renew a user token before the expiry

VaultAuthControllerV2.lookup.value=To lookup a user token
VaultAuthControllerV2.lookup.notes=To lookup a details for given user token

VaultAuthControllerV2.revoke.value=To revoke a token
VaultAuthControllerV2.revoke.notes=To revoke the access for a given token

UserPassControllerV2.createUser.value=To create user
UserPassControllerV2.createUser.notes=<b>To create user for use with username/password authentication </b><br>\
<b>username: </b>The username for the user.<br>\
<b>password: </b>The password for the user.<br>\
<b>policies: </b>Comma-separated list of policies. If set to empty.<br>

UserPassControllerV2.readUser.value=To read user
UserPassControllerV2.readUser.notes=To get user details for a user from username/password authentication

UserPassControllerV2.deleteUser.value=To delete user
UserPassControllerV2.deleteUser.notes=<b>To delete user from username/password authentication </b><br>\
<b>username: </b>The username for the user.<br>

UserPassControllerV2.updatePassword.value=To update user (password)
UserPassControllerV2.updatePassword.notes=<b>To update user (password) for user with username/password authentication </b><br>\
<b>username: </b>The username for the user.<br>\
<b>password: </b>The password for the user.<br>\
<b>policies: </b>Comma-separated list of policies. If set to empty.<br>

UserPassControllerV2.listUsers.value=To get list of users
UserPassControllerV2.listUsers.notes=To get list of users from username/password authentication

UserPassControllerV2.login.value=To login using userpass authentication
UserPassControllerV2.login.notes=<b>To login a user using username/password with userpass authentication </b><br>\
<b>username: </b>The username for the user.<br>\
<b>password: </b>The password for the user.<br>

SysControllerV2.checkVaultHealth.value=To get Vault health
SysControllerV2.checkVaultHealth.notes=To get Vault health

SysControllerV2.unseal.value=To unseal vault
SysControllerV2.unseal.notes=<b>To unseal vault </b><br>\
<b>serverip: </b>Server IP Address.<br>\
<b>port: </b>Server port.<br>\
<b>key: </b>Vault unseal Key.<br>\
<b>reset: </b>Reset or not boolean value.<br>

SysControllerV2.unsealProgress.value=To get unseal progress
SysControllerV2.unsealProgress.notes=To get unseal progress status


AppRoleControllerV2.createAppRole.value=To Create AppRole
AppRoleControllerV2.createAppRole.notes=<b>Create AppRole </b><br>\
<b>role_name: </b>Role name for the app role. <br>\
<b>secret_id_num_uses: </b>secret_id_num_uses should be minimum 0 and maximum 999999999. <br>\
<b>secret_id_ttl: </b>secret_id_ttl should be minimum 0 and maximum 999999999.<br>\
<b>token_num_uses: </b>token_num_uses should be minimum 0 and maximum 999999999.<br>\
<b>token_ttl: </b>token_ttl should be minimum 0 and maximum 999999999.<br>\
<b>token_max_ttl: </b>token_max_ttl should be minimum 0 and maximum 999999999.<br>

AppRoleControllerV2.associateApprole.value=To associate an AppRole to a Safe
AppRoleControllerV2.associateApprole.notes=<b>Associate an AppRole to a Safe </b><br>\
<b>role_name: </b>Rolename cannot be null or empty. <br>\
<b>path: </b>Path cannot be null or empty.<br>\
<b>access: </b>Access cannot be null or empty.Access can have values read,write and deny.<br>

AppRoleControllerV2.readAppRole.value=To read AppRole
AppRoleControllerV2.readAppRole.notes=To read AppRole

AppRoleControllerV2.listAppRoles.value=To list AppRoles
AppRoleControllerV2.listAppRoles.notes=To list AppRoles

AppRoleControllerV2.readAppRoleRoleId.value=To read AppRole role_id
AppRoleControllerV2.readAppRoleRoleId.notes=To read AppRole role_id

AppRoleControllerV2.deleteAppRole.value=To delete AppRole
AppRoleControllerV2.deleteAppRole.notes=<b>Delete AppRole </b><br>\
<b>role_name: </b>Rolename cannot be null or empty. <br>

AppRoleControllerV2.createsecretId.value=To create secret_id for AppRole
AppRoleControllerV2.createsecretId.notes=<b>Create secret_id for AppRole </b><br>\
<b>role_name: </b>Rolename cannot be null or empty. <br>\
<b>env: </b>Environment cannot be null or empty.<br>\
<b>appname: </b>Application name cannot be null or empty.<br>

AppRoleControllerV2.deleteSecretId.value=To delete secret_id for AppRole
AppRoleControllerV2.deleteSecretId.notes=<b>Delete secret_id for AppRole </b><br>\
<b>role_name: </b>Rolename cannot be null or empty. <br>\
<b>secret_id: </b>Secret ID cannot be null or empty.<br>

AppRoleControllerV2.readSecretId.value=To read AppRole secret_id
AppRoleControllerV2.readSecretId.notes=To read AppRole secret_id

AppRoleControllerV2.login.value=To Login with AppRole using role_id and secret_id
AppRoleControllerV2.login.notes=<b>Login with AppRole using role_id and secret_id </b><br>\
<b>role_id: </b>Role ID cannot be null or empty. <br>\
<b>secret_id: </b>Secret ID cannot be null or empty.<br>

AccessControllerV2.createPolicy.value=To create policy
AccessControllerV2.createPolicy.notes=To create policy

AccessControllerV2.updatePolicy.value=To update policy
AccessControllerV2.updatePolicy.notes=To update policy

AccessControllerV2.listAllPolices.value=To list all existing policies
AccessControllerV2.listAllPolices.notes=To list all existing policies

AccessControllerV2.getPolicyInfo.value=To get details of a policy
AccessControllerV2.getPolicyInfo.notes=To get details of a policy

AccessControllerV2.deletePolicyInfo.value=To delete a policy
AccessControllerV2.deletePolicyInfo.notes=To delete a policy

AWSAuthControllerV2.authenticateEC2.value=To login/fetch client token using aws ec2 pkcs7 document
AWSAuthControllerV2.authenticateEC2.notes=<b>Login/fetch client token using aws ec2 pkcs7 document </b><br>\
<b>role: </b>Role cannot be null or empty. <br>\
<b>pkcs7: </b>pkcs7 cannot be null or empty.<br>

AWSAuthControllerV2.createRole.value=To create an aws role
AWSAuthControllerV2.createRole.notes=<b>Create an aws role </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. The values are EC2 or IAM<br>\
<b>role: </b>Name of the role. Minimum 3 characters.<br>\
<b>bound_ami_id: </b>If set, defines a constraint on the EC2 instances that they should be using one of the AMI ID specified by this parameter.<br>\
<b>bound_account_id: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>bound_region: </b>If set, defines a constraint on the EC2 instances that the region in its identity document must match one of the regions specified by this parameter.<br>\
<b>bound_vpc_id: </b>If set, defines a constraint on the EC2 instance to be associated with a VPC ID that matches one of the values specified by this parameter.<br>\
<b>bound_subnet_id: </b>If set, defines a constraint on the EC2 instance to be associated with a subnet ID that matches one of the values specified by this parameter.<br>\
<b>bound_iam_role_arn: </b>If set, defines a constraint on the authenticating EC2 instance that it must match one of the IAM role ARNs specified by this parameter.<br>\
<b>bound_iam_instance_profile_arn: </b>If set, defines a constraint on the EC2 instances to be associated with an IAM instance profile ARN. <br>\
<b>policies: </b>If set, defines the policies for the role.<br>

AWSAuthControllerV2.updateRole.value=To update an aws role
AWSAuthControllerV2.updateRole.notes=<b>Update an aws role. </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. The values are EC2 or IAM<br>\
<b>role: </b>Name of the role. Minimum 3 characters.<br>\
<b>bound_ami_id: </b>If set, defines a constraint on the EC2 instances that they should be using one of the AMI ID specified by this parameter.<br>\
<b>bound_account_id: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>bound_region: </b>If set, defines a constraint on the EC2 instances that the region in its identity document must match one of the regions specified by this parameter.<br>\
<b>bound_vpc_id: </b>If set, defines a constraint on the EC2 instance to be associated with a VPC ID that matches one of the values specified by this parameter.<br>\
<b>bound_subnet_id: </b>If set, defines a constraint on the EC2 instance to be associated with a subnet ID that matches one of the values specified by this parameter.<br>\
<b>bound_iam_role_arn: </b>If set, defines a constraint on the authenticating EC2 instance that it must match one of the IAM role ARNs specified by this parameter.<br>\
<b>bound_iam_instance_profile_arn: </b>If set, defines a constraint on the EC2 instances to be associated with an IAM instance profile ARN. <br>\
<b>policies: </b>If set, defines the policies for the role.<br>

AWSAuthControllerV2.deleteRole.value=To delete an existing role
AWSAuthControllerV2.deleteRole.notes=<b>To delete an existing role </b><br>\
<b>role: </b>Name of the role.<br>

AWSAuthControllerV2.fetchRole.value=To fetch information for an aws approle
AWSAuthControllerV2.fetchRole.notes=To fetch information for an aws approle

AWSAuthControllerV2.listRoles.value=To get list of AWS roles
AWSAuthControllerV2.listRoles.notes=To get list of AWS roles


LDAPAuthControllerV2.authenticateLdap.value=To authenticate against LDAP
LDAPAuthControllerV2.authenticateLdap.notes=<b>To authenticate against LDAP </b><br>\
<b>username: </b>The username of the LDAP user.<br>\
<b>password: </b>The password for the LDAP user.<br>

LDAPAuthControllerV2.configureLdapGroup.value=To configure a LDAP group in vault
LDAPAuthControllerV2.configureLdapGroup.notes=<b>To configure a LDAP group in vault. </b><br>\
<b>groupname: </b>The name of the LDAP group.<br>\
<b>policies: </b>Comma-separated list of policies associated to the group.<br>

LDAPAuthControllerV2.listLdapGroups.value=To get all existing LDAP Groups configured in Vault
LDAPAuthControllerV2.listLdapGroups.notes=To get all existing LDAP Groups configured in Vault

LDAPAuthControllerV2.fetchLdapGroup.value=To retrieve LDAP groups
LDAPAuthControllerV2.fetchLdapGroup.notes=To retrieve LDAP groups

LDAPAuthControllerV2.deleteLdapGroup.value=To delete LDAP group
LDAPAuthControllerV2.deleteLdapGroup.notes=<b>To delete LDAP group </b><br>\
<b>groupname: </b>The name of the LDAP group.<br>

LDAPAuthControllerV2.configureLdapUser.value=To configure a LDAP user
LDAPAuthControllerV2.configureLdapUser.notes=<b>To configure a LDAP user </b><br>\
<b>username: </b>The username of the LDAP user.<br>\
<b>policies: </b>Comma-separated list of policies associated to the user.<br>\

LDAPAuthControllerV2.listLdapUsers.value=To list all configured LDAP Users
LDAPAuthControllerV2.listLdapUsers.notes=To list all configured LDAP Users

LDAPAuthControllerV2.fetchLdapUser.value=To get the details of LDAP User configured in vault
LDAPAuthControllerV2.fetchLdapUser.notes=To get the details of LDAP User configured in vault

LDAPAuthControllerV2.deleteLdapUser.value=To delete a LDAP User
LDAPAuthControllerV2.deleteLdapUser.notes=<b>To delete a LDAP User </b><br>\
<b>username: </b>The username of the LDAP user.<br>

OIDCAuthController.getAuthUrl.value=Obtain an authorization URL from Vault to start an OIDC login flow
OIDCAuthController.getAuthUrl.notes=<b>Obtain an authorization URL from Vault to start an OIDC login flow </b><br>\
<b>role: </b>Name of the role against which the login is being attempted. Defaults to configured default_role if not provided.<br>\
<b>redirect_uri: </b>Path to the callback to complete the login.<br>

OIDCAuthController.processOIDCCallback.value=OIDC process callback
OIDCAuthController.processOIDCCallback.notes=<b>Exchange an authorization code for an OIDC ID Token. The ID token will be further validated against any bound claims, and if valid a Vault token will be returned. </b><br>\
<b>state: </b>Opaque state ID that is part of the Authorization URL and will be included in the the redirect following successful authenication on the provider.<br>\
<b>code: </b>Provider-generated authorization code that Vault will exchange for an ID token.<br>

SecretControllerV2.readFromVault.value=To read secret from vault
SecretControllerV2.readFromVault.notes=To read secret from vault

SecretControllerV2.write.value=To write secret into vault
SecretControllerV2.write.notes=<b>Secret Key: </b>The allowed characters for secret key(s) are alphabets, numbers and underscores only. <br>\
<b>Secret Value: </b>Generally, single line text will be accepted as the secret value.\
If you want to input the secret values with multiple text, then the secret value has to be combined into a single line using appropriate techniques/tools. \
If the secret value contains any JSON unsafe characters such as newlines, backslashes, single quotes, double quotes, then the secret has to be JSON escaped before writing into vault.<br>\
<b>Sample Input JSON: </b>{"path":"shared/mysafe01/myfolder","data":{"secret1":"value1","secret2":"value2"}}

SecretControllerV2.deleteFromVault.value=To delete secret from vault
SecretControllerV2.deleteFromVault.notes=<b>To delete secret from vault </b><br>\
<b>path: </b>Path for deleting the secret from vault.<br>\

SecretControllerV2.readFromVaultRecursive.value=To read all folders and secrets 
SecretControllerV2.readFromVaultRecursive.notes=To read all folders and secrets 

SecretControllerV2.readFoldersAndSecrets.value=To read folders and secrets for a given folder
SecretControllerV2.readFoldersAndSecrets.notes=To read folders and secrets for a given folder

DirectoryServiceControllerV2.searchByUPN.value=Search for user(s) by User Principal Name
DirectoryServiceControllerV2.searchByUPN.notes=Search for user(s) by User Principal Name

DirectoryServiceControllerV2.searchByCorpId.value=Search for user(s) by CorpId
DirectoryServiceControllerV2.searchByCorpId.notes=Search for user(s) by CorpId

DirectoryServiceControllerV2.searchByGroup.value=Search for group(s) by group name
DirectoryServiceControllerV2.searchByGroup.notes=Search for group(s) by group name

AWSIAMAuthControllerV2.configureClient.value=To configure the credentials required to perform API calls to AWS
AWSIAMAuthControllerV2.configureClient.notes=<b>To configure the credentials required to perform API calls to AWS. </b><br>\
<b>access_key: </b>AWS Access key with permissions to query AWS APIs.<br>\
<b>secret_key: </b>AWS Secret key with permissions to query AWS APIs.<br>

AWSIAMAuthControllerV2.readClientConfiguration.value=To return the previously configured AWS access credentials
AWSIAMAuthControllerV2.readClientConfiguration.notes=To return the previously configured AWS access credentials

AWSIAMAuthControllerV2.createStsRole.value=To allow explicit association of STS roles to satellite AWS accounts
AWSIAMAuthControllerV2.createStsRole.notes=<b>To allow explicit association of STS roles to satellite AWS accounts. </b><br>\
<b>account_id: </b>AWS account ID to be associated with STS role.<br>\
<b>sts_role: </b>AWS ARN for STS role to be assumed.<br>

AWSIAMAuthControllerV2.createIamRole.value=To register am IAM role with Vault
AWSIAMAuthControllerV2.createIamRole.notes=<b>Register am IAM role with Vault </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. Value for auth_type is IAM.<br>\
<b>role: </b>Rolename cannot be null or empty. Minimum 3 characters.<br>\
<b>bound_iam_principal_arn: </b>Defines the list of IAM principals that are permitted to login to the role using the iam auth method.<br>\
<b>policies: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>resolve_aws_unique_ids: </b>When set, resolves the bound_iam_principal_arn to the AWS Unique ID for the bound principal ARN. This field is ignored when bound_iam_principal_arn ends with a wildcard character.<br>

AWSIAMAuthControllerV2.fetchRole.value=To return a previously registered role configuration
AWSIAMAuthControllerV2.fetchRole.notes=To return a previously registered role configuration

AWSIAMAuthControllerV2.listRoles.value=To list Roles all the roles that are registered
AWSIAMAuthControllerV2.listRoles.notes=To list Roles all the roles that are registered

AWSIAMAuthControllerV2.deleteRole.value=To delete the previously registered role
AWSIAMAuthControllerV2.deleteRole.notes=<b>To delete the previously registered role. </b><br>\
<b>role: </b>Role name cannot be null or empty.<br>

AWSIAMAuthControllerV2.authenticateIAM.value=To login/fetch a client token using AWS IAM authentication 
AWSIAMAuthControllerV2.authenticateIAM.notes=<b>To login/fetch a client token using AWS IAM authentication. </b><br>\
<b>iam_http_request_method: </b>IAM Http request method cannot be null or empty.<br>\
<b>iam_request_url: </b>IAM request url cannot be null or empty.<br>\
<b>iam_request_body: </b>IAM request body cannot be null or empty.<br>\
<b>iam_request_headers: </b>IAM request headers cannot be null or empty.<br>\
<b>role: </b>Role cannot be null or empty.<br>\
<b>pkcs7: </b>PKCS7 signature of the identity document with all \n characters removed. Either this needs to be set OR both identity and signature need to be set when using the ec2 auth method.<br>

SafesController.addAWSRoleToSafe.value=To add AWS role to a Safe
SafesController.addAWSRoleToSafe.notes=To add AWS role to a Safe

SafesController.addAWSIAMRoleToSafe.value=To add AWS IAM role to safe
SafesController.addAWSIAMRoleToSafe.notes=To add AWS IAM role to safe

AWSIAMAuthControllerV2.removeIamRole.value=To remove IAM role from Safe 
AWSIAMAuthControllerV2.removeIamRole.notes=To remove IAM role from Safe 
 
AWSIAMAuthControllerV2.updateRole.value=To update an IAM role
AWSIAMAuthControllerV2.updateRole.notes=<b>Update an IAM role </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. Value for auth_type is IAM.<br>\
<b>role: </b>Rolename cannot be null or empty. Minimum 3 characters.<br>\
<b>bound_iam_principal_arn: </b>Defines the list of IAM principals that are permitted to login to the role using the iam auth method.<br>\
<b>policies: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>resolve_aws_unique_ids: </b>When set, resolves the bound_iam_principal_arn to the AWS Unique ID for the bound principal ARN. This field is ignored when bound_iam_principal_arn ends with a wildcard character.<br>

SafesController.deleteAWSRoleFromSafe.value=Delete AWS role from SDB
SafesController.deleteAWSRoleFromSafe.notes=<b> Delete AWS role from SDB. </b><br>\
<b>path: </b>Path cannot be null or empty. This field provide the path of the safe where the access can be granted/removed. Example :- users/testSafe<br>\
<b>role: </b>Role cannot be null or empty. This field contains the role for which the permission are getting removed.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, write and deny.

AWSIAMAuthControllerV2.authenticateAWS.value=Authenticate using AWS methods EC2/IAM
AWSIAMAuthControllerV2.authenticateAWS.notes=<b>Authenticate using AWS methods EC2/IAM. </b><br>\
<b>iam_http_request_method: </b>IAM Http request method cannot be null or empty.<br>\
<b>iam_request_url: </b>IAM request url cannot be null or empty.<br>\
<b>iam_request_body: </b>IAM request body cannot be null or empty.<br>\
<b>iam_request_headers: </b>IAM request headers cannot be null or empty.<br>\
<b>role: </b>Role cannot be null or empty.<br>\
<b>pkcs7: </b>pkcs7 cannot be null or empty.<br>

SafesController.deleteAWSPermissionFromSafe.value=Delete AWS permission from SDB
SafesController.deleteAWSPermissionFromSafe.notes=<b>Delete AWS permission from SDB </b><br>\
<b>path: </b>Path cannot be null or empty. This field provide the path of the safe where the access can be granted/removed. Example :- users/testSafe<br>\
<b>role: </b>Role cannot be null or empty. This field contains the role for which the permission are getting removed.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, write and deny.

SelfSupportController.deleteGroupFromSafe.value=To remove a group from safe
SelfSupportController.deleteGroupFromSafe.notes=<b>Remove a group from safe. </b><br>\
<b>path: </b>Path cannot be null or empty. This field provide the path of the safe where the access can be granted/removed. Example :- users/testSafe<br>\
<b>groupname: </b>Groupname cannot be null or empty. This field contains the groupname for which the permission are getting removed.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, write and deny.

SelfSupportController.addGroupToSafe.value=To add a group to Safe
SelfSupportController.addGroupToSafe.notes=<b>Add a group to Safe </b><br>\
<b>path: </b>Path cannot be null or empty. This field provide the path of the safe where the access can be granted/removed. Example :- users/testSafe<br>\
<b>groupname: </b>Groupname cannot be null or empty. This field contains the groupname for which the permission is getting added.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, write and deny.

SelfSupportController.deleteSafe.value=To delete Safe and its associated users, groups, roles
SelfSupportController.deleteSafe.notes=<b>Delete Safe and its associated users, groups, roles </b><br>\
<b>path: </b>Path cannot be null or empty. This field provide the path of the safe where the safe can be deleted. Example :- users/testSafe<br>\
<br>Three safe types can be deleted: Users safe, shared safe and application safe.<br>

SelfSupportController.updateSafe.value=To update Safe and its associated users, groups, roles
SelfSupportController.updateSafe.notes=<b>This updates Safe and its associated users, groups, roles.</b><br>\
<b>path: </b>Path cannot be null or empty. This field provide the path of the safe where the safe can be updated. Example :- users/testSafe<br>\
<b>Three safe types can be updated: Users safe, shared safe and application safe.<br>\
<b>name: </b>Name cannot be null or empty. Minimum 3 characters.Only allowed 20 safes for each safe type: users, shared and application.<br>\
<b>owner: </b>Owner email cannot be null or empty.Should be a valid email.<br>\
<b>description: </b>Description cannot be null or empty.Minimum 10 characters.<br>

SelfSupportController.addAWSRoleToSafe.value=To add AWS role to a Safe
SelfSupportController.addAWSRoleToSafe.notes=<b>Add AWS role to a Safe </b><br>\
<b>path: </b>Path cannot be null or empty. This field provide the path of the safe where the access can be granted. Example :- users/testSafe<br>\
<b>role: </b>Role cannot be null or empty. This field contains the role for which the permission is getting added.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, write and deny.

SelfSupportController.deleteAWSRoleFromSafe.value=Delete AWS role from SDB
SelfSupportController.deleteAWSRoleFromSafe.notes=<b>Delete AWS role from SDB </b><br>\
<b>path: </b>Path cannot be null or empty. This field provide the path of the safe where the access can be removed. Example :- users/testSafe<br>\
<b>role: </b>Role cannot be null or empty. This field contains the role for which the permission are getting removed.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, write and deny.

SelfSupportController.deleteAWSPermissionFromSafe.value=Delete AWS permission from SDB
SelfSupportController.deleteAWSPermissionFromSafe.notes=<b>Delete AWS permission from SDB. </b><br>\
<b>path: </b>Path cannot be null or empty. This field provide the path of the safe where the access can be removed. Example :- users/testSafe<br>\
<b>role: </b>Role cannot be null or empty. This field contains the role for which the permission are getting removed.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, write and deny.

SelfSupportController.associateApprole.value=To associate an AppRole to a Safe
SelfSupportController.associateApprole.notes=<b>Associate an AppRole to a Safe. </b><br>\
<b>path: </b>Path cannot be null or empty. This field provide the path of the safe where the access can be removed. Example :- users/testSafe<br>\
<b>role_name: </b>Rolename cannot be null or empty. This field contains the role_name for which the permission are getting removed.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, write and deny.

SelfSupportController.deleteApproleFromSafe.value=To delete an AppRole from a Safe
SelfSupportController.deleteApproleFromSafe.notes=<b>Delete an AppRole from a Safe. </b><br>\
<b>path: </b>Path cannot be null or empty. This field provide the path of the safe where the access can be removed. Example :- users/testSafe<br>\
<b>role_name: </b>Rolename cannot be null or empty. This field contains the role_name for which the permission are getting removed.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, write and deny.

SelfSupportController.createRole.value=To create an aws role
SelfSupportController.createRole.notes=<b>To create an aws role. </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. Value for auth_type is EC2.<br>\
<b>role: </b>Rolename cannot be null or empty. Minimum 3 characters.<br>\
<b>bound_ami_id: </b>If set, defines a constraint on the EC2 instances that they should be using one of the AMI ID specified by this parameter.<br>\
<b>bound_account_id: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>bound_region: </b>If set, defines a constraint on the EC2 instances that the region in its identity document must match one of the regions specified by this parameter.<br>\
<b>bound_vpc_id: </b>If set, defines a constraint on the EC2 instance to be associated with a VPC ID that matches one of the values specified by this parameter.<br>\
<b>bound_subnet_id: </b>If set, defines a constraint on the EC2 instance to be associated with a subnet ID that matches one of the values specified by this parameter.<br>\
<b>bound_iam_role_arn: </b>If set, defines a constraint on the authenticating EC2 instance that it must match one of the IAM role ARNs specified by this parameter.<br>\
<b>bound_iam_instance_profile_arn: </b>If set, defines a constraint on the EC2 instances to be associated with an IAM instance profile ARN. <br>\
<b>policies: </b>If set, defines the policies for the role.<br>

SelfSupportController.createIamRole.value=To register am IAM role with Vault
SelfSupportController.createIamRole.notes=<b>To register am IAM role with Vault. </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. Value for auth_type is IAM.<br>\
<b>role: </b>Rolename cannot be null or empty. Minimum 3 characters.<br>\
<b>bound_iam_principal_arn: </b>Bound parameter should be specified.<br>\
<b>policies: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>resolve_aws_unique_ids: </b>When set, resolves the bound_iam_principal_arn to the AWS Unique ID for the bound principal ARN. This field is ignored when bound_iam_principal_arn ends with a wildcard character.<br>

SelfSupportController.updateRole.value=To update an aws role
SelfSupportController.updateRole.notes=<b>To update an aws role. </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. Value for auth_type is EC2.<br>\
<b>role: </b>Rolename cannot be null or empty. Minimum 3 characters.<br>\
<b>bound_ami_id: </b>If set, defines a constraint on the EC2 instances that they should be using one of the AMI ID specified by this parameter.<br>\
<b>bound_account_id: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>bound_region: </b>If set, defines a constraint on the EC2 instances that the region in its identity document must match one of the regions specified by this parameter.<br>\
<b>bound_vpc_id: </b>If set, defines a constraint on the EC2 instance to be associated with a VPC ID that matches one of the values specified by this parameter.<br>\
<b>bound_subnet_id: </b>If set, defines a constraint on the EC2 instance to be associated with a subnet ID that matches one of the values specified by this parameter.<br>\
<b>bound_iam_role_arn: </b>If set, defines a constraint on the authenticating EC2 instance that it must match one of the IAM role ARNs specified by this parameter.<br>\
<b>bound_iam_instance_profile_arn: </b>If set, defines a constraint on the EC2 instances to be associated with an IAM instance profile ARN. <br>\
<b>policies: </b>If set, defines the policies for the role.<br>

SelfSupportController.updateIAMRole.value=To update an aws iam role
SelfSupportController.updateIAMRole.notes=<b>To update an aws iam role </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. Value for auth_type is IAM<br>\
<b>role: </b>Rolename cannot be null or empty. Minimum 3 characters.<br>\
<b>bound_iam_principal_arn: </b>Bound parameter should be specified.<br>\
<b>policies: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>resolve_aws_unique_ids: </b>When set, resolves the bound_iam_principal_arn to the AWS Unique ID for the bound principal ARN. This field is ignored when bound_iam_principal_arn ends with a wildcard character.<br>

SelfSupportController.authorized.value=To check if the user has permission on the path
SelfSupportController.authorized.notes=To check if the user has permission on the path

SelfSupportController.getInfoAsPowerUser.value=To get safe info
SelfSupportController.getInfoAsPowerUser.notes=To get safe info

SelfSupportController.createSafe.value=To create Safe and associate basic policies
SelfSupportController.createSafe.notes=<b>Create Safe and associate basic policies </b><br>\
<b>path: </b>Path cannot be null or empty. This field provide the path of the safe. Example :- users/testSafe<br>\
<b>name: </b>Name cannot be null or empty. Minimum 3 characters.Only allowed 20 safes for each safe type: users, shared and application.<br>\
<b>owner: </b>Owner email cannot be null or empty.Should be a valid email.<br>\
<b>description: </b>Description cannot be null or empty.Minimum 10 characters.<br>

SelfSupportController.getFolders.value=To get list of folders of a Safe
SelfSupportController.getFolders.notes=To get list of folders of a Safe

SelfSupportController.addUserToSafe.value=To add a user to Safe
SelfSupportController.addUserToSafe.notes=<b>Add a user to the safe </b><br>\
<b>path: </b>Path cannot be null or empty. This field provide the path of the safe where the access can be added. Example :- users/testSafe<br>\
<b>username: </b>Username cannot be null or empty. This field contains the username for which the permission is getting added.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, write and deny.

SelfSupportController.removeUserFromSafe.value=To remove a user from Safe
SelfSupportController.removeUserFromSafe.notes=<b>Removes a user from Safe </b><br>\
<b>path: </b>Path cannot be null or empty. This field provide the path of the safe where the access can be removed. Example :- users/testSafe<br>\
<b>username: </b>Username cannot be null or empty. This field contains the username for which the permission are getting removed.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, write and deny.

SelfSupportController.getSafeAsPowerUser.value=To get list of Safes
SelfSupportController.getSafeAsPowerUser.notes=This gets the list of Safes

AppRoleControllerV3.createAppRole.value=To Create AppRole
AppRoleControllerV3.createAppRole.notes=<b>Create AppRole </b><br>\
<b>role_name: </b>Rolename cannot be null or empty. This field contains the role_name for which the permission are getting granted/removed.<br>\
<b>bind_secret_id: </b>secret_id_num_uses should be minimum 0 and maximum 999999999. <br>\
<b>secret_id_num_uses: </b>secret_id_num_uses should be minimum 0 and maximum 999999999. <br>\
<b>secret_id_ttl: </b>secret_id_ttl should be minimum 0 and maximum 999999999.<br>\
<b>token_num_uses: </b>token_num_uses should be minimum 0 and maximum 999999999.<br>\
<b>token_ttl: </b>token_ttl should be minimum 0 and maximum 999999999.<br>\
<b>token_max_ttl: </b>token_max_ttl should be minimum 0 and maximum 999999999.<br>

AppRoleControllerV3.deleteAppRole.value=To delete AppRole
AppRoleControllerV3.deleteAppRole.notes=<b>Delete AppRole </b><br>\
<b>role_name: </b>Rolename cannot be null or empty. This field contains the role_name for which the permission are getting granted/removed.<br>

SelfSupportController.getsafes.value=To get list of safes having read/write permission
SelfSupportController.getsafes.notes=To get list of safes having read/write permission

SelfSupportController.deleteSecretIds.value=To delete secret_ids associated with an AppRole
SelfSupportController.deleteSecretIds.notes=<b>To delete secret_ids associated with an AppRole </b><br>\
<b>role_name: </b>Rolename cannot be null or empty.<br>\
<b>accessorIds: </b>AccessorIds cannot be null or empty. <br>

SelfSupportController.readAppRoleRoleId.value=To read AppRole role_id for an AppRole
SelfSupportController.readAppRoleRoleId.notes=To read AppRole role_id for an AppRole

SelfSupportController.readAppRoleSecretId.value=To read AppRole secret_id for an AppRole
SelfSupportController.readAppRoleSecretId.notes=To read AppRole secret_id for an AppRole

SelfSupportController.readAppRoleDetails.value=To read all the information of an AppRole including its metadata, role_id, accessor_ids
SelfSupportController.readAppRoleDetails.notes=To read all the information of an AppRole including its metadata, role_id, accessor_ids

SelfSupportController.readAppRole.value=To read basic information of an AppRole
SelfSupportController.readAppRole.notes=To read basic information of an AppRole

SelfSupportController.readAccessorsOfSecretIds.value=To get list of accessors of all the secret_ids issued against the AppRole
SelfSupportController.readAccessorsOfSecretIds.notes=To get list of accessors of all the secret_ids issued against the AppRole

SelfSupportController.listAppRoles.value=To list AppRoles
SelfSupportController.listAppRoles.notes=To list AppRoles

SelfSupportController.updateAppRole.value=To update an existing AppRole
SelfSupportController.updateAppRole.notes=<b>To update an existing AppRole. </b><br>\
<b>role_name: </b>Rolename cannot be null or empty. This field contains the role_name for which the permission are getting granted/removed.<br>\
<b>bind_secret_id: </b>secret_id_num_uses should be minimum 0 and maximum 999999999. <br>\
<b>secret_id_num_uses: </b>secret_id_num_uses should be minimum 0 and maximum 999999999. <br>\
<b>secret_id_ttl: </b>secret_id_ttl should be minimum 0 and maximum 999999999.<br>\
<b>token_num_uses: </b>token_num_uses should be minimum 0 and maximum 999999999.<br>\
<b>token_ttl: </b>token_ttl should be minimum 0 and maximum 999999999.<br>\
<b>token_max_ttl: </b>token_max_ttl should be minimum 0 and maximum 999999999.<br>

ServiceAccountsControllerV2.getADServiceAccounts.value=To get list of service accounts from AD
ServiceAccountsControllerV2.getADServiceAccounts.notes=To get list of service accounts from AD

ServiceAccountsControllerV2.onboardServiceAccount.value=To onboard a service account into TVault for password rotation
ServiceAccountsControllerV2.onboardServiceAccount.notes=<b>Onboarding of service account into TVault for password rotation. </b><br>\
<b>name: </b>Name specified should be minimum 3 and maximum 60 characters only and the allowed characters for name are  alphabets, numbers, _ and - characters only. <br>\
<b>appID: </b>Application ID cannot be null or empty.<br>\
<b>appName: </b>Application Name cannot be null or empty.<br>\
<b>max_ttl: </b>max_ttl should be minimum 1 and maximum 1590897977L.<br>\
<b>ttl: </b>ttl should be minimum 1.<br>\
<b>autoRotate: </b>Auto rotate boolean value.<br>\
<b>adGroup: </b>Ad Group provides the group name.<br>\
<b>appTag: </b>Application Tag cannot be null or empty.<br>

ServiceAccountsControllerV2.addUserToServiceAccount.value=To add user to Service Account who can read/reset password
ServiceAccountsControllerV2.addUserToServiceAccount.notes=<b>To add user to Service Account who can read/reset password </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>username: </b>Username cannot be null or empty. This field contains the username for whom the permission is getting added<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, reset and deny.

ServiceAccountsControllerV2.removeUserServiceAccount.value=To remove user from Service Account who can read/reset password
ServiceAccountsControllerV2.removeUserServiceAccount.notes=<b>To remove user from Service Account who can read/reset password </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>username: </b>Username cannot be null or empty. This field contains the username for whom the permission are getting removed<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, reset and deny.

ServiceAccountsControllerV2.resetPassword.value=To reset Service Account Password
ServiceAccountsControllerV2.resetPassword.notes=<b>To reset Service Account Password. </b><br>\
<b>serviceAccountName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>

ServiceAccountsControllerV2.offboardServiceAccount.value=To offboard a service account from TVault for password rotation
ServiceAccountsControllerV2.offboardServiceAccount.notes=<b>Offboard a service account from TVault for password rotation </b><br>\
<b>name: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>

ServiceAccountsControllerV2.getServiceAccounts.value=To get list of onboarded service accounts from TVault
ServiceAccountsControllerV2.getServiceAccounts.notes=To get list of onboarded service accounts from TVault

ServiceAccountsControllerV2.addGroupToServiceAccount.value=To add group to Service Account who can read/reset password
ServiceAccountsControllerV2.addGroupToServiceAccount.notes=<b>To add group to Service Account who can read/reset password </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>groupname: </b>Group name cannot be null or empty. This field contains the groupname for whom the permission is getting added<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, reset and deny.

ServiceAccountsControllerV2.removeGroupFromServiceAccount.value=To remove group from Service Account who can read/reset password
ServiceAccountsControllerV2.removeGroupFromServiceAccount.notes=<b>To remove group from Service Account who can read/reset password </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>groupname: </b>Group name cannot be null or empty. This field contains the groupname for whom the permission are getting removed<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, reset and deny.

ServiceAccountsControllerV2.getServiceAccountsMeta.value=To get metadata of service accounts
ServiceAccountsControllerV2.getServiceAccountsMeta.notes=To get metadata of service accounts

ServiceAccountsControllerV2.associateApprole.value=To associate an AppRole to a Service Account
ServiceAccountsControllerV2.associateApprole.notes=<b>To associate an AppRole to a Service Account </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>approlename: </b>Approle name cannot be null or empty. This field contains the approlename for whom the permission is getting added<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, reset and deny.

ServiceAccountsControllerV2.removeApprole.value=To remove an AppRole from Service Account
ServiceAccountsControllerV2.removeApprole.notes=<b>To remove an AppRole from Service Account </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>approlename: </b>Approle name cannot be null or empty. This field contains the approlename for whom the permission are getting removed<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, reset and deny.

ServiceAccountsControllerV2.addAWSRole.value=To add AWS role to a service account
ServiceAccountsControllerV2.addAWSRole.notes=<b>To add AWS role to a service account </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>rolename: </b>Role name cannot be null or empty. This field contains the rolename for whom the permission is getting added<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, reset and deny.

ServiceAccountsControllerV2.removeAWSRole.value=To remove AWS role from service account
ServiceAccountsControllerV2.removeAWSRole.notes=<b>To remove AWS role from service account </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>rolename: </b>Role name cannot be null or empty. This field contains the rolename for whom the permission are getting removed<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, reset and deny.

ServiceAccountsControllerV2.createAWSRole.value=To create an aws role
ServiceAccountsControllerV2.createAWSRole.notes=<b>To create an aws role. </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. The values are EC2 or IAM<br>\
<b>role: </b>Name of the role. Minimum 3 characters.<br>\
<b>bound_ami_id: </b>If set, defines a constraint on the EC2 instances that they should be using one of the AMI ID specified by this parameter.<br>\
<b>bound_account_id: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>bound_region: </b>If set, defines a constraint on the EC2 instances that the region in its identity document must match one of the regions specified by this parameter.<br>\
<b>bound_vpc_id: </b>If set, defines a constraint on the EC2 instance to be associated with a VPC ID that matches one of the values specified by this parameter.<br>\
<b>bound_subnet_id: </b>If set, defines a constraint on the EC2 instance to be associated with a subnet ID that matches one of the values specified by this parameter.<br>\
<b>bound_iam_role_arn: </b>If set, defines a constraint on the authenticating EC2 instance that it must match one of the IAM role ARNs specified by this parameter.<br>\
<b>bound_iam_instance_profile_arn: </b>If set, defines a constraint on the EC2 instances to be associated with an IAM instance profile ARN. <br>\
<b>policies: </b>If set, defines the policies for the role.<br>

ServiceAccountsControllerV2.createIamRole.value=To create an aws iam role
ServiceAccountsControllerV2.createIamRole.notes=<b>To create an aws iam role. </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. The values is IAM<br>\
<b>role: </b>Name of the role. Minimum 3 characters.<br>\
<b>bound_iam_principal_arn: </b>Defines the list of IAM principals that are permitted to login to the role using the iam auth method.<br>\
<b>policies: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>resolve_aws_unique_ids: </b>When set, resolves the bound_iam_principal_arn to the AWS Unique ID for the bound principal ARN. This field is ignored when bound_iam_principal_arn ends with a wildcard character.<br>

ServiceAccountsControllerV2.updateOnboardServiceAccount.value=To update onboarded service account
ServiceAccountsControllerV2.updateOnboardServiceAccount.notes=<b>Update onboarded service account </b><br>\
<b>name: </b>Name specified should be minimum 3 and maximum 60 characters only and the allowed characters for name are  alphabets, numbers, _ and - characters only. <br>\
<b>appID: </b>Application ID cannot be null or empty.<br>\
<b>appName: </b>Application Name cannot be null or empty.<br>\
<b>max_ttl: </b>max_ttl should be minimum 1 and maximum 1590897977L.<br>\
<b>ttl: </b>ttl should be minimum 1.<br>\
<b>autoRotate: </b>Auto rotate boolean value.<br>\
<b>adGroup: </b>Ad Group provides the group name.<br>\
<b>appTag: </b>Application Tag cannot be null or empty.<br>

ServiceAccountsControllerV2.readPassword.value=To read Service Account Password
ServiceAccountsControllerV2.readPassword.notes=<b>To read Service Account Password. </b><br>

SSLCertificateController.login.value=To authenticate against NCLM
SSLCertificateController.login.notes=To authenticate against NCLM
SSLCertificateController.sslcreate.value=SSL Certificate Creation in NCLM
SSLCertificateController.sslcreate.notes=<b>SSL Certificate Creation in NCLM </b><br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>appName: </b>Application name cannot be null or empty.<br>\
<b>certType: </b>Certificate type cannot be null or empty. Certificate Type values can be internal or external.<br>\
<b>dnsList: </b>Dnslist cannot be null or empty.<br>\
<b>notificationEmail: </b>notification email cannot be null or empty. It should be a valid email.<br>

SSLCertificateController.getssl.value=Get SSl Certificates List from metadata 
SSLCertificateController.getssl.notes=Get SSl Certificates List from metadata
SSLCertificateController.getRevocationReasons.value=Get list of revocation reasons related to certificate
SSLCertificateController.getRevocationReasons.notes=Get list of revocation reasons related to certificate
SSLCertificateController.issueRevocationRequest.value=Issue a revocation request for certificate
SSLCertificateController.issueRevocationRequest.notes=Issue a revocation request for certificate
WorkloadDetailsController.getApprolesFromCwm.appname.value=To get Application list from CWM api by app name
WorkloadDetailsController.getApprolesFromCwm.appname.notes=To get Application list from CWM api by app name
SSLCertificateController.addUserToCertificate.value=To add a user to SSL Certificate
SSLCertificateController.addUserToCertificate.notes=<b>To add a user to SSL Certificate </b><br>\
<b>username: </b>Username cannot be null or empty. This field contains the username for whom the permission is getting added.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read and deny.

SSLCertificateController.certificatename.text=.t-mobile.com
SSLCertificateController.associateApproletoCertificate.value=To associate an AppRole to a Certificate
SSLCertificateController.associateApproletoCertificate.notes=<b>To associate an AppRole to a Certificate </b><br>\
<b>approleName: </b>Approle name cannot be null or empty. This field contains the approleName for whom the permission is getting added.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read  and deny. <br>

SSLCertificateController.renewCertificate.value=To Renew a certificate
SSLCertificateController.renewCertificate.notes=<b>To Renew a certificate </b><br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>

SSLCertificateController.removeGroupFromCertificate.value=To remove a group from SSL Certificate
SSLCertificateController.removeGroupFromCertificate.notes=<b>To remove a group from SSL Certificate </b><br>\
<b>groupname: </b>Group name cannot be null or empty. This field contains the groupname for whom the permission are getting removed.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read  and deny.

SSLCertificateController.removeUserFromCertificate.value=To remove a user from SSL Certificate
SSLCertificateController.removeUserFromCertificate.notes=<b>To remove a user from SSL Certificate </b><br>\
<b>username: </b>Username cannot be null or empty. This field contains the username for whom the permission are getting removed.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read and deny.

SSLCertificateController.addGroupToCertificate.value=To add a group to SSL Certificate
SSLCertificateController.addGroupToCertificate.notes=<b>To add a group to SSL Certificate </b><br>\
<b>groupname: </b>Group name cannot be null or empty. This field contains the groupname for whom the permission is getting added.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read and deny.
SSLCertificateController.getListOfCertificates.value=Get list of certificates by certificate type for admin
SSLCertificateController.getListOfCertificates.notes=Get list of certificates by certificate type for admin
SSLCertificateController.getCertificateDetails.value=Get Certificate detail
SSLCertificateController.getCertificateDetails.notes=Get Certificate detail
sslcertmanager.external.certificate.lifetime=1
sslcertmanager.external.certificate.telephonenumber =111-111-1111
sslcertmanager.external.certificate.requester.name=
sslcertmanager.external.certificate.requester.email=
SSLCertificateController.validateCertificateDetails.value=To validate and get the status of external certificate from nclm
SSLCertificateController.validateCertificateDetails.notes=To validate and get the status of external certificate from nclm
SSLCertificateController.transferCertificateOwner.value=Transfer the certificate ownership
SSLCertificateController.transferCertificateOwner.notes=<b>Transfer the certificate ownership </b><br>\
<b>certName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external. <br>\
<b>certOwnerEmailId: </b>Certificate owner email value. <br>

SSLCertificateController.deleteCertificate.value=To delete certificate and metadata
SSLCertificateController.deleteCertificate.notes=<b>To delete certificate and metadata  </b><br>\
<b>certificate_name: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certificate_type: </b>Certificate Type value can be internal or external. <br>

SSLCertificateController.getAllCertificates.value=To Get Internal and External certificates metadata details for admin and approle token
SSLCertificateController.getAllCertificates.notes=To Get Internal and External certificates metadata details for admin and approle token

OidcAuthControllerV2.getAuthUrl.value=To get oidc auth url
OidcAuthControllerV2.getAuthUrl.notes=To get oidc auth url

OidcAuthControllerV2.processOIDCCallback.value=To process oidc callback and get vault client token
OidcAuthControllerV2.processOIDCCallback.notes=To process oidc callback and get vault client token

OIDCAuthController.getIdentityGroupDetails.value=To get identity group details.
OIDCAuthController.getIdentityGroupDetails.notes=To get identity group details.

OIDCAuthController.searchGroupsInAzure.value=To search groups in AAD
OIDCAuthController.searchGroupsInAzure.notes=To search groups in AAD

OIDCAuthController.searchGroupEmailInAzureAD.value=To search groupEmail in AAD
OIDCAuthController.searchGroupEmailInAzureAD.notes=To search groupEmail in AAD

SSLCertificateController.checkstatus.value=check if  the certificate is revoked in NCLM
SSLCertificateController.checkstatus.notes= check if  the certificate is revoked in NCLM

SSLCertificateController.onboardcert.value=Bulk onboard certificates from NCLM to Tvault
SSLCertificateController.onboardcert.notes= Bulk onboard certificates from NCLM to Tvault
SSLCertificateController.onboardsinglecert.value=onboard single certificate from NCLM to Tvault
SSLCertificateController.onboardsinglecert.notes=onboard single certificate from NCLM to Tvault

DirectoryServiceControllerV2.searchByDisplayName.value=To search users by displayName or NTTd
DirectoryServiceControllerV2.searchByDisplayName.notes=To search users by displayName or NTTd
DirectoryServiceControllerV2.getAllUsersDetailByNtIds.value=To get users detail by NTTds
DirectoryServiceControllerV2.getAllUsersDetailByNtIds.notes=To get users detail by NTTds

WorkloadDetailsController.getApprolesFromCwm.value=To get Application list from CWM api
WorkloadDetailsController.getApprolesFromCwm.notes=To get Application list from CWM api

ServiceAccountsControllerV2.transferSvcAccountOwner.value=To change service account owner
ServiceAccountsControllerV2.transferSvcAccountOwner.notes=<b> Change service account owner. </b><br>\
<b>serviceAccountName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>

ServiceAccountsControllerV2.getServiceAccountDetails.value=To get the details of onboarded service account
ServiceAccountsControllerV2.getServiceAccountDetails.notes=To get the details of onboarded service account

ServiceAccountsControllerV2.getServiceAccountsList.value=To get list of ad service accounts having read/reset permission
ServiceAccountsControllerV2.getServiceAccountsList.notes=To get list of ad service accounts having read/reset permission


SysControllerV2.checkSealStatus.value=To get vault seal status
SysControllerV2.checkSealStatus.notes=To get vault seal status

CertificateController.getTargetSystemList.value=To get target system list from NCLM
CertificateController.getTargetSystemList.notes=To get target system list from NCLM

CertificateController.getTargetSystemServiceList.value= To get target system service list from NCLM
CertificateController.getTargetSystemServiceList.notes= To get target system service list from NCLM

CertificateController.downloadCertificateWithPrivateKey.value=To download certificate with private key. This is a post api with file download. Login to T-Vault UI or use Postman to try this api.
CertificateController.downloadCertificateWithPrivateKey.notes=<b>To download certificate with private key. This is a post api with file download. Login to T-Vault UI or use Postman to try this api.</b><br>\
<b>certificateCred: </b>Certificate cred cannot be null or empty.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>issuerChain: </b>Issuer Chain cannot be null or empty.<br>\
<b>format: </b>Format cannot be null or empty.<br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\

CertificateController.downloadCertificate.value= To download certificate. This is a get api with file download. Login to T-Vault UI or use Postman to try this api.
CertificateController.downloadCertificate.notes= To download certificate. This is a get api with file download. Login to T-Vault UI or use Postman to try this api.

CertificateController.getCertificateDetails.value= To get certificate details.
CertificateController.getCertificateDetails.notes= To get certificate details.


SSLCertificateController.getssl.value=Get SSl Certificates List from metadata 
SSLCertificateController.getssl.notes=Get SSl Certificates List from metadata
SSLCertificateController.getRevocationReasons.value=Get list of revocation reasons related to certificate
SSLCertificateController.getRevocationReasons.notes=Get list of revocation reasons related to certificate
SSLCertificateController.issueRevocationRequest.value=Issue a revocation request for certificate
SSLCertificateController.issueRevocationRequest.notes=Issue a revocation request for certificate
WorkloadDetailsController.getApprolesFromCwm.appname.value=To get Application list from CWM api by app name
WorkloadDetailsController.getApprolesFromCwm.appname.notes=To get Application list from CWM api by app name
SSLCertificateController.addUserToCertificate.value=To add a user to SSL Certificate
SSLCertificateController.addUserToCertificate.notes=<b>To add a user to SSL Certificate. </b><br>\
<b>username: </b>Username cannot be null or empty. This field contains the username for whom the permission is getting added.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read and deny.

SSLCertificateController.certificatename.text=.t-mobile.com
SSLCertificateController.associateApproletoCertificate.value=To associate an AppRole to a Certificate
SSLCertificateController.associateApproletoCertificate.notes=<b>To associate an AppRole to a Certificate. </b><br>\
<b>approleName: </b>Approle name cannot be null or empty. This field contains the approleName for whom the permission is getting added.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read and deny.

SSLCertificateController.renewCertificate.value=To Renew a certificate
SSLCertificateController.renewCertificate.notes=To Renew a certificate 
SSLCertificateController.removeGroupFromCertificate.value=To remove a group from SSL Certificate
SSLCertificateController.removeGroupFromCertificate.notes=<b>To remove a group from SSL Certificate. </b><br>\
<b>groupname: </b>Group name cannot be null or empty. This field contains the groupname for whom the permission are getting removed.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read and deny.

SSLCertificateController.removeUserFromCertificate.value=To remove a user from SSL Certificate
SSLCertificateController.removeUserFromCertificate.notes=<b>To remove a user from SSL Certificate. </b><br>\
<b>username: </b>Username cannot be null or empty. This field contains the username for whom the permission are getting removed.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read and deny.

SSLCertificateController.addGroupToCertificate.value=To add a group to SSL Certificate
SSLCertificateController.addGroupToCertificate.notes=<b>To add a group to SSL Certificate. </b><br>\
<b>groupname: </b>Group name cannot be null or empty. This field contains the groupname for whom the permission is getting added.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read and deny.
SSLCertificateController.getListOfCertificates.value=Get list of certificates by certificate type for admin
SSLCertificateController.getListOfCertificates.notes=Get list of certificates by certificate type for admin
SSLCertificateController.getCertificateDetails.value=Get Certificate detail
SSLCertificateController.getCertificateDetails.notes=Get Certificate detail
SSLCertificateController.addAwsRoleToSSLCertificate.value=To add AWS role to a certificate
SSLCertificateController.addAwsRoleToSSLCertificate.notes=<b>To add AWS role to a certificate.  </b><br>\
<b>rolename: </b>Role name cannot be null or empty. This field contains the rolename for whom the permission is getting added.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read and deny.
SSLCertificateController.removeAWSRoleFromSSLCertificate.value=To remove AWS role from certificate
SSLCertificateController.removeAWSRoleFromSSLCertificate.notes=<b>To remove AWS role from certificate. </b><br>\
<b>rolename: </b>Role name cannot be null or empty. This field contains the rolename for whom the permission are getting removed.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>

SSLCertificateController.createAWSRoleForSSL.value=To create an AWS role for certificate
SSLCertificateController.createAWSRoleForSSL.notes=<b>To create an AWS role for certificate </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. The values are EC2 or IAM<br>\
<b>role: </b>Name of the role. Minimum 3 characters.<br>\
<b>bound_ami_id: </b>If set, defines a constraint on the EC2 instances that they should be using one of the AMI ID specified by this parameter.<br>\
<b>bound_account_id: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>bound_region: </b>If set, defines a constraint on the EC2 instances that the region in its identity document must match one of the regions specified by this parameter.<br>\
<b>bound_vpc_id: </b>If set, defines a constraint on the EC2 instance to be associated with a VPC ID that matches one of the values specified by this parameter.<br>\
<b>bound_subnet_id: </b>If set, defines a constraint on the EC2 instance to be associated with a subnet ID that matches one of the values specified by this parameter.<br>\
<b>bound_iam_role_arn: </b>If set, defines a constraint on the authenticating EC2 instance that it must match one of the IAM role ARNs specified by this parameter.<br>\
<b>bound_iam_instance_profile_arn: </b>If set, defines a constraint on the EC2 instances to be associated with an IAM instance profile ARN. <br>\
<b>policies: </b>If set, defines the policies for the role.<br>

SSLCertificateController.createIAMRoleForSSL.value=To create an AWS IAM role for certificate
SSLCertificateController.createIAMRoleForSSL.notes=<b>To create an AWS IAM role for certificate </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. Value for auth_type is IAM.<br>\
<b>role: </b>Rolename cannot be null or empty. Minimum 3 characters.<br>\
<b>bound_iam_principal_arn: </b>Defines the list of IAM principals that are permitted to login to the role using the iam auth method.<br>\
<b>policies: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>resolve_aws_unique_ids: </b>When set, resolves the bound_iam_principal_arn to the AWS Unique ID for the bound principal ARN. This field is ignored when bound_iam_principal_arn ends with a wildcard character.<br>

DirectoryServiceControllerV2.searchByEmailInCorpAD.value=To search email in CORP AD
DirectoryServiceControllerV2.searchByEmailInCorpAD.notes=To search email in CORP AD
SSLCertificateController.deleteApproleFromCertificate.value=To Remove Approle from SSL certificate
SSLCertificateController.deleteApproleFromCertificate.notes=<b>To Remove Approle from SSL certificate </b><br>\
<b>approleName: </b>Approle name cannot be null or empty. This field contains the approleName for whom the permission are getting removed.<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read and deny.

SSLCertificateController.unlinkCertificate.value=Delete metadata , policies  and permissions for selected certificate from application
SSLCertificateController.unlinkCertificate.notes=<b>Unlink certificate from  application </b><br>\
<b>certificate_Name: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certificate-type: </b>Certificate type cannot be null or empty. Values are internal or external.<br>\
<b>release-reason: </b>Release reason for unlinking the certificate.<br>\


SSLCertificateController.getAllOnboardPendingCertificates.value=Get all onboard pending certificates from nclm
SSLCertificateController.getAllOnboardPendingCertificates.notes=Get all onboard pending certificates from nclm
SSLCertificateController.onboardSSLCertificate.value=To onboard single NCLM certificate to tvault
SSLCertificateController.onboardSSLCertificate.notes=<b>Onboard single NCLM certificate to tvault </b><br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>appName: </b>Application name cannot be null or empty.<br>\
<b>certOwnerEmailId: </b>Certificate owner email cannot be null or empty.<br>\
<b>certType: </b>Certificate type cannot be null or empty. Values are internal or external.<br>\
<b>notificationEmail: </b>Notification email cannot be null or empty.<br>

SSLCertificateController.ssledit.value=To update the metadata details for an ssl certificate
SSLCertificateController.ssledit.notes=<b>To update the metadata details for an ssl certificate </b><br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate type cannot be null or empty. Values are internal or external.<br>\
<b>notificationEmail: </b>Notification email name cannot be null or empty.<br>\
<b>projectLeadEmail: </b>Project lead email email cannot be null or empty.<br>\
<b>applicationOwnerEmail: </b>Application owner email cannot be null or empty.<br>

ServiceAccountsControllerV2.offboarddecommissioned.value=To offboard decommissioned service account
ServiceAccountsControllerV2.offboarddecommissioned.notes=<b>To offboard decommissioned service account. </b><br>\
<b>name: </b>Name specified should be minimum 3 chanracters and maximum 60 characters and name can have alphabets, numbers, _ and - characters only. <br>\
<b>owner: </b>Owner can have alphabets, numbers, _ and - characters only.<br>\

IAMServiceAccountsController.addUserToIAMServiceAccount.value=To add user to IAM service account
IAMServiceAccountsController.addUserToIAMServiceAccount.notes=<b>To add user to IAM service account. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>username: </b>Username cannot be null or empty. This field contains the username for whom the permission is getting added<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.
IAMServiceAccountsController.rotateIAMServiceAccountCreds.value=To rotate IAM service account secret
IAMServiceAccountsController.rotateIAMServiceAccountCreds.notes=<b>Rotate IAM service account secret for an access key. </b><br>\
<b>accessKeyId: </b>AccessKeyID  cannot be null or empty. <br>\
<b>accountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only<br>\
<b>userName: </b>Username cannot be null or empty.
IAMServiceAccountsController.activateIAMServiceAccount.value=To activate IAM service account
IAMServiceAccountsController.activateIAMServiceAccount.notes=<b>Activate IAM service account, this will generate secrets for the IAM service account. </b><br>\
<b>serviceAccountName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for UserName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\

IAMServiceAccountsController.onboardIAMServiceAccount.value=To onboard a IAM Service Account into TVault
IAMServiceAccountsController.onboardIAMServiceAccount.notes=<b>Onboarding of IAM Service Account into TVault can be done for only those users who have iamportal_master_approle permissions. </b><br>\
<b>userName: </b>UserName specified should be minimum 11 characters only and the allowed characters for UserName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>awsAccountName: </b>AWSAccountName specified should be minimum 1 characters and maximum 50 characters only and the allowed characters for AWSAccountName are alphabets, numbers, _ and - characters only.<br>\
<b>owner_ntid: </b>Owner NTID can have alphabets, numbers, _ and - characters only.<br>\
<b>owner_email: </b>Owner Email cannot be null or empty and should be in a proper email format. Example :- abc.t-mobile.com<br>\
<b>application_id: </b>Application Id cannot be null or empty.<br>\
<b>application_name: </b>Application Name cannot be null or empty.<br>\
<b>application_tag: </b>Application Tag cannot be null or empty.<br>\
<b>accessKeyId: </b>AccessKeyId specified should be minimum 16 characters and maximum 128 characters only.<br>\
<b>expiryDuration: </b>The value should be provided in milliseconds and it should be between 7 days and 90 days. Example :- 604800000L - 7776000000L <br>\
<b>createdAtEpoch: </b>Created at Epoch cannot be null or empty.<br>

IAMServiceAccountsController.removeUserFromIAMServiceAccount.value=To remove a user from IAM Service Account
IAMServiceAccountsController.removeUserFromIAMServiceAccount.notes=<b>To remove a user from IAM Service Account. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>username: </b>Username cannot be null or empty. This field contains the username for whom the permission is getting removed.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.
IAMServiceAccountsController.addGroupToIAMServiceAccount.value=To add a group to IAM Service Account
IAMServiceAccountsController.addGroupToIAMServiceAccount.notes=<b>To add a group to IAM Service Account. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>groupname: </b>Group name cannot be null or empty. This field contains the group name for which the permission is getting added.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.
IAMServiceAccountsController.removeGroupFromIAMServiceAccount.value=To remove a group from IAM Service Account
IAMServiceAccountsController.removeGroupFromIAMServiceAccount.notes=<b>To remove a group from IAM Service Account. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>groupname: </b>Group name cannot be null or empty. This field contains the group name for which the permission is getting removed.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.
IAMServiceAccountsController.getOnboardedIAMServiceAccounts.value=To get list of onboarded IAM service accounts from TVault
IAMServiceAccountsController.getOnboardedIAMServiceAccounts.notes=To get list of onboarded IAM service accounts from TVault
IAMServiceAccountsController.getIAMServiceAccountsList.value=To get list of IAM service accounts having read/reset/deny permission
IAMServiceAccountsController.getIAMServiceAccountsList.notes=To get list of IAM service accounts having read/reset/deny permission
IAMServiceAccountsController.getIAMServiceAccountDetail.value=To get metadata of IAM service accounts
IAMServiceAccountsController.getIAMServiceAccountDetail.notes=To get metadata of IAM service accounts
IAMServiceAccountsController.getIAMServiceAccountSecretKey.value=To get secretkey/accesskey of IAM service accounts
IAMServiceAccountsController.getIAMServiceAccountSecretKey.notes=To get secretkey/accesskey of IAM service accounts
IAMServiceAccountsController.readFolders.value=To get folders of IAM service accounts
IAMServiceAccountsController.readFolders.notes=To get folders of IAM service accounts
IAMServiceAccountsController.associateApproletoIAMSvcAcc.value=To associate an AppRole to an IAM service accounts
IAMServiceAccountsController.associateApproletoIAMSvcAcc.notes=<b>To associate an AppRole to an IAM service accounts. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>approlename: </b>Approle name cannot be null or empty. This field contains the approle for which the permission is getting added<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.
IAMServiceAccountsController.removeApproleFromIAMSvcAcc.value=To remove an AppRole from an IAM service account
IAMServiceAccountsController.removeApproleFromIAMSvcAcc.notes=<b>To remove an AppRole from an IAM service account. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>approlename: </b>Approle name cannot be null or empty. This field contains the approle for which the permission is getting removed<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.
IAMServiceAccountsController.readSecrets.value=Read access key secrets from access key for an IAM service account
IAMServiceAccountsController.readSecrets.notes=Read access key secrets from access key for an IAM service account
IAMServiceAccountsController.offboardIAMServiceAccount.value=To offboard IAM Service account
IAMServiceAccountsController.offboardIAMServiceAccount.notes=<b>Offboarding of IAM Service Account into TVault can be done for only those users who have iamportal_master_approle permissions. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>
IAMServiceAccountsController.createAWSRole.value=To create an aws ec2 role
IAMServiceAccountsController.createAWSRole.notes=<b>To create an aws ec2 role </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. The values are EC2 or IAM<br>\
<b>role: </b>Name of the role. Minimum 3 characters.<br>\
<b>bound_ami_id: </b>If set, defines a constraint on the EC2 instances that they should be using one of the AMI ID specified by this parameter.<br>\
<b>bound_account_id: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>bound_region: </b>If set, defines a constraint on the EC2 instances that the region in its identity document must match one of the regions specified by this parameter.<br>\
<b>bound_vpc_id: </b>If set, defines a constraint on the EC2 instance to be associated with a VPC ID that matches one of the values specified by this parameter.<br>\
<b>bound_subnet_id: </b>If set, defines a constraint on the EC2 instance to be associated with a subnet ID that matches one of the values specified by this parameter.<br>\
<b>bound_iam_role_arn: </b>If set, defines a constraint on the authenticating EC2 instance that it must match one of the IAM role ARNs specified by this parameter.<br>\
<b>bound_iam_instance_profile_arn: </b>If set, defines a constraint on the EC2 instances to be associated with an IAM instance profile ARN. <br>\
<b>policies: </b>If set, defines the policies for the role.<br>

IAMServiceAccountsController.createIamRole.value=To create an aws iam role
IAMServiceAccountsController.createIamRole.notes=<b>To create an aws iam role </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. Value for auth_type is IAM.<br>\
<b>role: </b>Rolename cannot be null or empty. Minimum 3 characters.<br>\
<b>bound_iam_principal_arn: </b>Defines the list of IAM principals that are permitted to login to the role using the iam auth method.<br>\
<b>policies: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>resolve_aws_unique_ids: </b>When set, resolves the bound_iam_principal_arn to the AWS Unique ID for the bound principal ARN. This field is ignored when bound_iam_principal_arn ends with a wildcard character.<br>

IAMServiceAccountsController.addAwsRoleToIAMSvcacc.value=To add AWS role to an IAM service account
IAMServiceAccountsController.addAwsRoleToIAMSvcacc.notes=<b>To add AWS role to an IAM service account. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>rolename: </b>AWS role name cannot be null or empty. This field contains the aws role for which the permission is getting added<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.
IAMServiceAccountsController.removeAWSRoleFromIAMSvcacc.value=To remove AWS role from an IAM service account
IAMServiceAccountsController.removeAWSRoleFromIAMSvcacc.notes=<b>To remove AWS role from an IAM service account. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>rolename: </b>AWS role name cannot be null or empty. This field contains the aws role for which the permission is getting removed<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.


AzureServicePrincipalAccountsController.onboardAzureServiceAccount.value=To onboard Azure service principal into TVault
AzureServicePrincipalAccountsController.onboardAzureServiceAccount.notes=<b>Onboarding of Azure service principal into TVault can be done for only those users who have azure_master_approle permissions. </b><br>\
<b>servicePrincipalName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>servicePrincipalId: </b>ServicePrincipalId specified should be minimum 10 characters and maximum 128 characters only.<br>\
<b>servicePrincipalClientId: </b>ServicePrincipalClientId specified should be minimum 10 characters and maximum 128 characters only.<br>\
<b>tenantId: </b>TenantId specified should be minimum 10 characters and maximum 128 characters only.<br>\
<b>owner_ntid: </b>Owner NTID can have alphabets, numbers, _ and - characters only.<br>\
<b>owner_email: </b>Owner Email cannot be null or empty and should be in a proper email format. Example :- abc.t-mobile.com<br>\
<b>application_id: </b>Application Id cannot be null or empty.<br>\
<b>application_name: </b>Application Name cannot be null or empty.<br>\
<b>application_tag: </b>Application Tag cannot be null or empty.<br>\
<b>createdAtEpoch: </b>Created at Epoch cannot be null or empty.<br>\
<b>secretKeyId: </b>SecretKeyId specified should be minimum 10 characters and maximum 128 characters only.<br>\
<b>expiryDuration: </b>The value should be provided in milliseconds and it should be between 7 days and 90 days. Example :- 604800000L - 7776000000L <br>
AzureServicePrincipalAccountsController.getAzureServicePrincipalList.value=To get list of Azure service principal having read/reset/deny permission
AzureServicePrincipalAccountsController.getAzureServicePrincipalList.notes=To get list of Azure service principal having read/reset/deny permission
AzureServicePrincipalAccountsController.readSecret.value=Read secret from secret key for an Azure service principal
AzureServicePrincipalAccountsController.readSecret.notes=Read secret from secret key for an Azure service principal
AzureServicePrincipalAccountsController.offboardAzureServiceAccount.value=To offboard Azure Service principal
AzureServicePrincipalAccountsController.offboardAzureServiceAccount.notes=<b>Offboarding of Azure service principal into TVault can be done for only those users who have azure_master_approle permissions. </b><br>\
<b>azureSvcAccName: </b>Azure service principal name cannot be null or empty.
AzureServicePrincipalAccountsController.getOnboardedAsureServicePrincipal.value=Gets the list of azure service principal onboarded
AzureServicePrincipalAccountsController.getOnboardedAsureServicePrincipal.notes=Gets the list of azure service principal onboarded
AzureServicePrincipalAccountsController.removeUserFromAzureServiceAccount.value=To remove a user from Azure service principal
AzureServicePrincipalAccountsController.removeUserFromAzureServiceAccount.notes=<b>To remove a user from Azure service principal. </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>username: </b>Username cannot be null or empty. This field contains the username for whom the permission is getting removed.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.
AzureServicePrincipalAccountsController.createAWSRole.value=To create an aws ec2 role
AzureServicePrincipalAccountsController.createAWSRole.notes=<b>To create an aws ec2 role </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. The values are EC2 or IAM<br>\
<b>role: </b>Name of the role. Minimum 3 characters.<br>\
<b>bound_ami_id: </b>If set, defines a constraint on the EC2 instances that they should be using one of the AMI ID specified by this parameter.<br>\
<b>bound_account_id: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>bound_region: </b>If set, defines a constraint on the EC2 instances that the region in its identity document must match one of the regions specified by this parameter.<br>\
<b>bound_vpc_id: </b>If set, defines a constraint on the EC2 instance to be associated with a VPC ID that matches one of the values specified by this parameter.<br>\
<b>bound_subnet_id: </b>If set, defines a constraint on the EC2 instance to be associated with a subnet ID that matches one of the values specified by this parameter.<br>\
<b>bound_iam_role_arn: </b>If set, defines a constraint on the authenticating EC2 instance that it must match one of the IAM role ARNs specified by this parameter.<br>\
<b>bound_iam_instance_profile_arn: </b>If set, defines a constraint on the EC2 instances to be associated with an IAM instance profile ARN. <br>\
<b>policies: </b>If set, defines the policies for the role.<br>

AzureServicePrincipalAccountsController.createIamRole.value=To create an aws iam role
AzureServicePrincipalAccountsController.createIamRole.notes=<b>To create an aws iam role </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. Value for auth_type is IAM.<br>\
<b>role: </b>Rolename cannot be null or empty. Minimum 3 characters.<br>\
<b>bound_iam_principal_arn: </b>Defines the list of IAM principals that are permitted to login to the role using the iam auth method.<br>\
<b>policies: </b>If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the ones specified by this parameter.<br>\
<b>resolve_aws_unique_ids: </b>When set, resolves the bound_iam_principal_arn to the AWS Unique ID for the bound principal ARN. This field is ignored when bound_iam_principal_arn ends with a wildcard character.<br>

AzureServicePrincipalAccountsController.addAwsRoleToAzureSvcacc.value=To add AWS role to an Azure service principal
AzureServicePrincipalAccountsController.addAwsRoleToAzureSvcacc.notes=<b>Add AWS role to an Azure service principal </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>rolename: </b>AWS role name cannot be null or empty. This field contains the aws role for which the permission is getting added.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.
AzureServicePrincipalAccountsController.addUserToAzureServicePrincipal.value=To add user to Azure service principal
AzureServicePrincipalAccountsController.addUserToAzureServicePrincipal.notes=<b>Add user to Azure service principal. </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>username: </b>Username cannot be null or empty. This field contains the username for whom the permission is getting added.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.
AzureServicePrincipalAccountsController.addGroupToAzureServiceAccount.value=To add group to Azure service principal
AzureServicePrincipalAccountsController.addGroupToAzureServiceAccount.notes=<b>Add group to Azure service principal. </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>groupname: </b>Groupname cannot be null or empty. This field contains the group name for whom the permission is getting added.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.
AzureServicePrincipalAccountsController.getAzureServicePrincipalDetail.value=To get metadata of Azure service principal
AzureServicePrincipalAccountsController.getAzureServicePrincipalDetail.notes=To get metadata of Azure service principal

AzureServicePrincipalAccountsController.activateAzureServicePrincipal.value=To Activate Azure Service Principal
AzureServicePrincipalAccountsController.activateAzureServicePrincipal.notes=<b>Activate Azure Service Principal, this will generate secrets for the Azure Service Principal. </b><br>\
<b>servicePrincipalName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>

AzureServicePrincipalAccountsController.rotateSecret.value=To rotate Azure Service Principal secret
AzureServicePrincipalAccountsController.rotateSecret.notes=<b>Rotate Azure Service Principal secret for a secret key </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>secretKeyId: </b>SecretKeyID  cannot be null or empty. <br>\
<b>servicePrincipalId: </b>ServicePrincipalId specified should be minimum 10 characters and maximum 128 characters only.<br>\
<b>tenantId: </b>TenantId specified should be minimum 10 characters and maximum 128 characters only.<br>\
<b>expiryDurationMs: </b>ExpiryDuration cannot be null or empty. The value is in milliseconds. <br>
AzureServicePrincipalAccountsController.removeAwsRoleToAzureSvcacc.value=To remove an aws role from Azure service principal 
AzureServicePrincipalAccountsController.removeAwsRoleToAzureSvcacc.notes=<b>Remove an aws role from Azure service principal </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>rolename: </b>AWS role name cannot be null or empty. This field contains the aws role for which the permission are getting removed.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.
AzureServicePrincipalAccountsController.removeGroupFromAzureServiceAccount.value=To remove a group from Azure service principal
AzureServicePrincipalAccountsController.removeGroupFromAzureServiceAccount.notes=<b>Remove a group from Azure service principal </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>groupname: </b>Groupname cannot be null or empty. This field contains the group name for whom the permission are getting removed.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.
AzureServicePrincipalAccountsController.associateApproletoAzureServiceAccount.value=To associate an AppRole to an Azure service principal
AzureServicePrincipalAccountsController.associateApproletoAzureServiceAccount.notes=<b>Associate an AppRole to an Azure service principal. </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>approlename: </b>Approle name cannot be null or empty. This field contains the approle for which the permission is getting added.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.
AzureServicePrincipalAccountsController.removeApproleFromAzureSvcAcc.value=To remove an AppRole from Azure service principal
AzureServicePrincipalAccountsController.removeApproleFromAzureSvcAcc.notes=<b>Remove an AppRole from Azure service principal. </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>approlename: </b>Approle name cannot be null or empty. This field contains the approle for which the permission is getting removed.<br>\
<b>access: </b>Access cannot be null or empty. Access can have values read, rotate and deny.

SecretControllerV2.getSecretCount.value=To get total secret count in T-Vault
SecretControllerV2.getSecretCount.notes=To get total secret count in T-Vault

SelfSupportController.createAwsec2Role.value=To create AWS EC2 roles 
SelfSupportController.createAwsec2Role.notes=<b>To create AWS EC2 roles. </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. Value for auth_type is EC2<br>\
<b>role: </b>Rolename cannot be null or empty. Minimum 3 characters.<br>

SelfSupportController.createAwsiamRole.value=To create AWS IAM roles 
SelfSupportController.createAwsiamRole.notes=<b>To create AWS IAM roles. </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. Value for auth_type is IAM<br>\
<b>role: </b>Rolename cannot be null or empty. Minimum 3 characters.<br>\
<b>bound_iam_principal_arn: </b>Bound parameter should be specified.<br>
 
SelfSupportController.listRoles.value=To get list of AWS IAM and EC2 roles
SelfSupportController.listRoles.notes=To get list of AWS IAM and EC2 roles 

SelfSupportController.updateAwsiamRole.value=To update AWS IAM role 
SelfSupportController.updateAwsiamRole.notes=<b>To update AWS IAM role. </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. Value for auth_type is IAM.<br>\
<b>role: </b>Rolename cannot be null or empty. Minimum 3 characters.<br>\
<b>bound_iam_principal_arn: </b>Bound parameter should be specified.<br>

SelfSupportController.transferSafe.value=Transfer safe
SelfSupportController.transferSafe.notes=<b>Transfer safe </b><br>\
<b>safeName: </b>Safe name to transfer.<br>\
<b>safeType: </b>Safe type of the safe.<br>\
<b>newOwnerEmail: </b>New owner email to whom the safe is getting transfered. <br>

SelfSupportController.updateAwsec2Role.value=To update AWS EC2 role 
SelfSupportController.updateAwsec2Role.notes=<b>To update AWS EC2 role. </b><br>\
<b>auth_type: </b>AWS Authentication type cannot be null or empty. Value for auth_type is EC2.<br>\
<b>role: </b>Rolename cannot be null or empty. Minimum 3 characters.<br>

SelfSupportController.createAwsec2Role.value=To create AWS EC2 roles in New UI
SelfSupportController.createAwsec2Role.notes=To create AWS EC2 roles in New UI
SelfSupportController.createAwsiamRole.value=To create AWS IAM roles in new UI
SelfSupportController.createAwsiamRole.notes=To create AWS IAM roles in new UI
SelfSupportController.listRoles.value=To get list of AWS IAM and EC2 users
SelfSupportController.listRoles.notes=To get list of AWS IAM and EC2 users 

SecretControllerV2.getFolderVersionInfo.value=To get last changed information of a folder
SecretControllerV2.getFolderVersionInfo.notes=To get last changed information of a folder